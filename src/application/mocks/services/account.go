// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/services/account.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rodrigocardosodev/pismo-challenge/src/application/models"
)

// MockAccountServiceInterface is a mock of AccountServiceInterface interface.
type MockAccountServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceInterfaceMockRecorder
}

// MockAccountServiceInterfaceMockRecorder is the mock recorder for MockAccountServiceInterface.
type MockAccountServiceInterfaceMockRecorder struct {
	mock *MockAccountServiceInterface
}

// NewMockAccountServiceInterface creates a new mock instance.
func NewMockAccountServiceInterface(ctrl *gomock.Controller) *MockAccountServiceInterface {
	mock := &MockAccountServiceInterface{ctrl: ctrl}
	mock.recorder = &MockAccountServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountServiceInterface) EXPECT() *MockAccountServiceInterfaceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAccountServiceInterface) Create(ctx context.Context, documentNumber string) (models.AccountInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, documentNumber)
	ret0, _ := ret[0].(models.AccountInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAccountServiceInterfaceMockRecorder) Create(ctx, documentNumber interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccountServiceInterface)(nil).Create), ctx, documentNumber)
}

// GetByID mocks base method.
func (m *MockAccountServiceInterface) GetByID(ctx context.Context, id int64) (models.AccountInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(models.AccountInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockAccountServiceInterfaceMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockAccountServiceInterface)(nil).GetByID), ctx, id)
}

// IsValidCPF mocks base method.
func (m *MockAccountServiceInterface) IsValidCPF(cpf string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidCPF", cpf)
	ret0, _ := ret[0].(error)
	return ret0
}

// IsValidCPF indicates an expected call of IsValidCPF.
func (mr *MockAccountServiceInterfaceMockRecorder) IsValidCPF(cpf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidCPF", reflect.TypeOf((*MockAccountServiceInterface)(nil).IsValidCPF), cpf)
}

// allEqual mocks base method.
func (m *MockAccountServiceInterface) allEqual(cpf string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "allEqual", cpf)
	ret0, _ := ret[0].(bool)
	return ret0
}

// allEqual indicates an expected call of allEqual.
func (mr *MockAccountServiceInterfaceMockRecorder) allEqual(cpf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "allEqual", reflect.TypeOf((*MockAccountServiceInterface)(nil).allEqual), cpf)
}

// calculateDigit mocks base method.
func (m *MockAccountServiceInterface) calculateDigit(cpf string) byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "calculateDigit", cpf)
	ret0, _ := ret[0].(byte)
	return ret0
}

// calculateDigit indicates an expected call of calculateDigit.
func (mr *MockAccountServiceInterfaceMockRecorder) calculateDigit(cpf interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "calculateDigit", reflect.TypeOf((*MockAccountServiceInterface)(nil).calculateDigit), cpf)
}
