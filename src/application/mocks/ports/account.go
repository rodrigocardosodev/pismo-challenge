// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/ports/account.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rodrigocardosodev/pismo-challenge/src/application/models"
)

// MockIAccountReader is a mock of IAccountReader interface.
type MockIAccountReader struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountReaderMockRecorder
}

// MockIAccountReaderMockRecorder is the mock recorder for MockIAccountReader.
type MockIAccountReaderMockRecorder struct {
	mock *MockIAccountReader
}

// NewMockIAccountReader creates a new mock instance.
func NewMockIAccountReader(ctrl *gomock.Controller) *MockIAccountReader {
	mock := &MockIAccountReader{ctrl: ctrl}
	mock.recorder = &MockIAccountReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountReader) EXPECT() *MockIAccountReaderMockRecorder {
	return m.recorder
}

// GetByID mocks base method.
func (m *MockIAccountReader) GetByID(id int64) (models.AccountInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(models.AccountInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIAccountReaderMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIAccountReader)(nil).GetByID), id)
}

// MockIAccountWriter is a mock of IAccountWriter interface.
type MockIAccountWriter struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountWriterMockRecorder
}

// MockIAccountWriterMockRecorder is the mock recorder for MockIAccountWriter.
type MockIAccountWriterMockRecorder struct {
	mock *MockIAccountWriter
}

// NewMockIAccountWriter creates a new mock instance.
func NewMockIAccountWriter(ctrl *gomock.Controller) *MockIAccountWriter {
	mock := &MockIAccountWriter{ctrl: ctrl}
	mock.recorder = &MockIAccountWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountWriter) EXPECT() *MockIAccountWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAccountWriter) Create(account models.AccountInterface) (models.AccountInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", account)
	ret0, _ := ret[0].(models.AccountInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIAccountWriterMockRecorder) Create(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountWriter)(nil).Create), account)
}

// UpdateAmount mocks base method.
func (m *MockIAccountWriter) UpdateAmount(id, amount int64) (models.AccountInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAmount", id, amount)
	ret0, _ := ret[0].(models.AccountInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAmount indicates an expected call of UpdateAmount.
func (mr *MockIAccountWriterMockRecorder) UpdateAmount(id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAmount", reflect.TypeOf((*MockIAccountWriter)(nil).UpdateAmount), id, amount)
}

// MockIAccountRepository is a mock of IAccountRepository interface.
type MockIAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountRepositoryMockRecorder
}

// MockIAccountRepositoryMockRecorder is the mock recorder for MockIAccountRepository.
type MockIAccountRepositoryMockRecorder struct {
	mock *MockIAccountRepository
}

// NewMockIAccountRepository creates a new mock instance.
func NewMockIAccountRepository(ctrl *gomock.Controller) *MockIAccountRepository {
	mock := &MockIAccountRepository{ctrl: ctrl}
	mock.recorder = &MockIAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountRepository) EXPECT() *MockIAccountRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockIAccountRepository) Create(account models.AccountInterface) (models.AccountInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", account)
	ret0, _ := ret[0].(models.AccountInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIAccountRepositoryMockRecorder) Create(account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountRepository)(nil).Create), account)
}

// GetByID mocks base method.
func (m *MockIAccountRepository) GetByID(id int64) (models.AccountInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(models.AccountInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockIAccountRepositoryMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockIAccountRepository)(nil).GetByID), id)
}

// UpdateAmount mocks base method.
func (m *MockIAccountRepository) UpdateAmount(id, amount int64) (models.AccountInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAmount", id, amount)
	ret0, _ := ret[0].(models.AccountInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAmount indicates an expected call of UpdateAmount.
func (mr *MockIAccountRepositoryMockRecorder) UpdateAmount(id, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAmount", reflect.TypeOf((*MockIAccountRepository)(nil).UpdateAmount), id, amount)
}
