// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/services/transaction.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rodrigocardosodev/pismo-challenge/src/application/models"
)

// MockITrasactionService is a mock of ITrasactionService interface.
type MockITrasactionService struct {
	ctrl     *gomock.Controller
	recorder *MockITrasactionServiceMockRecorder
}

// MockITrasactionServiceMockRecorder is the mock recorder for MockITrasactionService.
type MockITrasactionServiceMockRecorder struct {
	mock *MockITrasactionService
}

// NewMockITrasactionService creates a new mock instance.
func NewMockITrasactionService(ctrl *gomock.Controller) *MockITrasactionService {
	mock := &MockITrasactionService{ctrl: ctrl}
	mock.recorder = &MockITrasactionServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITrasactionService) EXPECT() *MockITrasactionServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITrasactionService) Create(ctx context.Context, accountId int64, operationId int8, amount float64) (models.TransactionInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, accountId, operationId, amount)
	ret0, _ := ret[0].(models.TransactionInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITrasactionServiceMockRecorder) Create(ctx, accountId, operationId, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITrasactionService)(nil).Create), ctx, accountId, operationId, amount)
}
