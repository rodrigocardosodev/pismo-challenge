// Code generated by MockGen. DO NOT EDIT.
// Source: src/application/ports/transaction.go

// Package mock_ports is a generated GoMock package.
package mock_ports

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/rodrigocardosodev/pismo-challenge/src/application/models"
)

// MockITransactionWriter is a mock of ITransactionWriter interface.
type MockITransactionWriter struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionWriterMockRecorder
}

// MockITransactionWriterMockRecorder is the mock recorder for MockITransactionWriter.
type MockITransactionWriterMockRecorder struct {
	mock *MockITransactionWriter
}

// NewMockITransactionWriter creates a new mock instance.
func NewMockITransactionWriter(ctrl *gomock.Controller) *MockITransactionWriter {
	mock := &MockITransactionWriter{ctrl: ctrl}
	mock.recorder = &MockITransactionWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionWriter) EXPECT() *MockITransactionWriterMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITransactionWriter) Create(Transaction models.TransactionInterface) (models.TransactionInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", Transaction)
	ret0, _ := ret[0].(models.TransactionInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITransactionWriterMockRecorder) Create(Transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITransactionWriter)(nil).Create), Transaction)
}

// MockITransactionRepository is a mock of ITransactionRepository interface.
type MockITransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockITransactionRepositoryMockRecorder
}

// MockITransactionRepositoryMockRecorder is the mock recorder for MockITransactionRepository.
type MockITransactionRepositoryMockRecorder struct {
	mock *MockITransactionRepository
}

// NewMockITransactionRepository creates a new mock instance.
func NewMockITransactionRepository(ctrl *gomock.Controller) *MockITransactionRepository {
	mock := &MockITransactionRepository{ctrl: ctrl}
	mock.recorder = &MockITransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITransactionRepository) EXPECT() *MockITransactionRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockITransactionRepository) Create(Transaction models.TransactionInterface) (models.TransactionInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", Transaction)
	ret0, _ := ret[0].(models.TransactionInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockITransactionRepositoryMockRecorder) Create(Transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockITransactionRepository)(nil).Create), Transaction)
}
